<div class="cartContent">
    <div class="cartHead">CART</div>
    <div id="cart"></div>
    <div class="container">
        <form id="payment-form">
            <div class="row">
                <div class="col-6 offset-6">
                    <div class="nextPartOrder">
                        <div class="saveOfOrder">YOU SAVE: <span style="color: red;"><b>50% </b></span>OFF</div>
                        <div class="grandTotal" id="total-price">GRAND TOTAL:</div>
                        <br>
                    </div>
                </div>

                <div class="col-12">
                    <div class="row">
                        <div class="col-12">
                            <div class="form-group email-block">
                                <label for="email">Enter your email *</label>
                                <small class="form-text text-muted">Your email for us to send your finished digital product to!</small>
                                <input type="email" id="email" class="form-control" required>
                                <small class="form-text text-danger email-error">email is invalid</small>
                            </div>
                        </div>
                    </div>
                    <div id="user-form-block">
                        {{> cart_user_form }}
                    </div>
                    <div class="row">
                        <div class="col-6 offset-6">
                            <button id="way-pay-btn" class="full-btn" style="padding: 5px" type="submit" form="payment-form" value="Submit">
                                Checkout
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>
    <div class="cartPageVisual">
        <hr>
        <div>
            <h2 style="margin-bottom: 25px">You don't have any orders yet.</h2>
            <a type="button" href="/order-page" class="getHome">Get my Cartoon! âžœ</a>
        </div>
    </div>
</div>
<script>
    var localStorageCart = JSON.parse(localStorage.getItem("cart"));

    if (localStorageCart == null) {
        localStorageCart = [];
    }

    if (localStorageCart.length === 0) {
        // redirect to home page if the cart is empty
        document.getElementsByClassName("nextPartOrder")[0].style.display = "none";
        document.getElementsByClassName("cartPageVisual")[0].style.display = "block";
    }

    localStorage.setItem("cart", JSON.stringify(localStorageCart));
    showCartElement();
    showUserFormBlock();

    $('#payment-form').submit(e => {
      e.preventDefault()

      payWay()
    })

    function isCanvasFormat () {
      try {
        const items = JSON.parse(localStorage.getItem("cart"))
        let result = false

        for (let i = 0; i < items.length; i++) {
          const type = items[i].format.type

          if (type.startsWith('canvas')) {
            result = true
            break
          }
        }

        return result
      } catch (e) {
        return false
      }
    }

    function showUserFormBlock () {
      if (!isCanvasFormat()) return

      $('#user-form-block').show()
    }

    function userFormData () {
      return getFormData($('#payment-form'))
    }

    function getItemTemplate(numPpl, bgName, price, text, image, format, index) {
        return `
            <div class="cart-item">
                <div class="cart-photo"></div>
                <div class="cart-info">
                    <div class="cart-title">Original Dream Portrait Art</div>
                    <div class="cart-details-container">
                        <div class="cart-details">
                            Number of people: <b>${numPpl}</b> <br/>
                            Background: ${bgName} <br/>
                            Format: ${format} <br/><br/>
                            Price: <del>${price * 2} USD</del> <b>${price} USD</b>
                        </div>
                    </div>
                </div>
                <div class="cart-delete-btn">
                    <button type="button" class="delete-cart-item" onclick="ClearData(${index})"></button>
                </div>
            </div>
        `
    }

    function showCartElement() {
        var localStorageCart = JSON.parse(localStorage.getItem("cart"));
        var totalPrice = 0;

        if (!localStorageCart) {
            return;
        }

        var shoppingCart = document.getElementById('cart');
        shoppingCart.innerHTML = '';

        for (var i = 0; i < localStorageCart.length; i++) {
            var item = localStorageCart[i];

            if (item.selectedBakcground != null) {
              const formatTitle = getFormatTitle(item?.format?.type)
              const price = item.selectedPeople.price + item.selectedBakcground.price + (item?.format?.price || 0)
              totalPrice += price;

              shoppingCart.innerHTML += getItemTemplate(item.selectedPeople.id, item.selectedBakcground.name, price, item.wishesText, item.image, formatTitle, i);
            }

        }
        var totalPriceElement = document.getElementById('total-price');
        totalPriceElement.innerHTML = 'GRAND TOTAL:<b> $' + totalPrice + ' </b>USD';
    }

    function getFormatTitle (type) {
      const TITLES = {
        'digital': 'Digital',
        'canvas-18': 'Canvas 18x12 (45x30cm)',
        'canvas-24': 'Canvas 24x16 (60x40cm)',
        'canvas-36': 'Canvas 36x24 (90x60cm)',
      }

      return TITLES[type] || TITLES.digital
    }


    function getTotalPrice() {
        var localStorageCart = JSON.parse(localStorage.getItem("cart"));
        var totalPrice = 0;

        if (!localStorageCart) {
            return;
        }

        for (var i = 0; i < localStorageCart.length; i++) {
            var item = localStorageCart[i];
            totalPrice += item.selectedPeople.price;

            if (item.selectedBakcground != null) {
                totalPrice += item.selectedBakcground.price;
            }
        }
        return totalPrice * 100;
    };

    function ClearData(index) {
        var localStorageCart = JSON.parse(localStorage.getItem("cart"));
        localStorageCart.splice(index, 1);
        localStorage.setItem('cart', JSON.stringify(localStorageCart));
        showCartElement();
        updateCartQty();

    }


    function payWay() {
        const emailValid = validateEmail();

        if (!emailValid) {
            return;
        }

        var createOrder = document.getElementById('createOrder');
        var wayforpay = new Wayforpay();
        //> Read order data from localStorage (ordered itmes):
        var localStorageCart = JSON.parse(localStorage.getItem("cart"));

        const order = [];

        for (var m = 0; m < localStorageCart.length; m++) {
            var item = localStorageCart[m];

            const formatPrice = item.format.price || 0
            const orderData = {
                peopleId: item.selectedPeople.id,
                backgroundName: item.selectedBakcground.name,
                imageUrl: item.imageUrl,
                text: item.wishesText,
                price: item.selectedPeople.price + item.selectedBakcground.price + formatPrice,
                formatType: item.format.type,
                email: getEmailValue()
            }

            if (isCanvasFormat()) {
                orderData.userForm = userFormData()
            }

            order.push(orderData);
        }
        ;
        //<

        //>Send request to the server ("/create-order") with ordered items;
        fetch('/create-order', {
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            method: 'POST',
            body: JSON.stringify({
                order: order
            })
        })
                .then(res => res.json())
                .then(res => {
                    const confirmPayment = () => {
                        fetch('/update-payment-status', {
                            headers: {
                                'Accept': 'application/json',
                                'Content-Type': 'application/json'
                            },
                            method: 'POST',
                            body: JSON.stringify({orderId: res.orderId})
                        }).then(() => {
                            localStorage.clear();
                            window.location.assign('/success-pay');
                        });
                    };
                    wayforpay.run({
                                merchantAccount: res.merchantAccount,
                                merchantDomainName: res.merchantDomainName,
                                merchantSignature: res.hashData,
                                orderReference: res.orderId,
                                orderDate: res.orderDate,
                                amount: res.amount,
                                currency: res.currency,
                                productName: res.productName,
                                productPrice: res.productPrice,
                                productCount: res.productCount
                            },
                            function (response) {
                                // on approved
                                confirmPayment();
                            },
                            function (response) {
                                // on declined
                                if ("{{isDevelopment}}") {
                                    confirmPayment();
                                }
                            },
                            function (response) {
                                // on pending or in processing
                                confirmPayment();
                            });
                })
    }

    function getEmailValue () {
        return $(".email-block #email").val()
    }

    function validateEmail() {
        const EMAIL_REGEX = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        const $emailError = $(".email-block .email-error");
        const email = getEmailValue();

        const isEmailValid = EMAIL_REGEX.test(email)
        $emailError.toggle(!isEmailValid)

        return isEmailValid
    }

</script>
